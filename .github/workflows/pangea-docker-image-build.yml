name: Pangea Proxy Build Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  workflow_dispatch:
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 2deviate/pangea-proxy
  
jobs:


  build:
    
    name: Build Image
    runs-on: ubuntu-latest
    environment: dev
    
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    
    - name: Log in to Docker Hub Registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}      
        
    - name: Log in to the Github Package Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}    

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: 'Get tag'
      id: tag
      uses: 'WyriHaximus/github-action-get-previous-tag@8a0e045f02c0a3a04e1452df58b90fc7e555e950'

    - name: Set correct environment
      run: |
        TAG=${{ steps.tag.outputs.tag }}
        echo "TAG=$TAG" >> "$GITHUB_ENV"        
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2


        
        
    - name: Build image
      id: version
      run: |
        tag_v=$(git describe --tags $(git rev-list --tags --max-count=1))
        tag=$(echo $tag_v | sed 's/v//')

    - name: Retrieve metadata
      id: meta
      uses: docker/metadata-action@v3.6.0
      with:
        images:
          ${{ env.REGISTRY }}/${{ github.repository }}        
        tags: |
          type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ env.TAG }}          
    
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v2.9.0
      with:
        context: nginx 
        push: true
        tags: ${{ steps.meta.outputs.tags }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v1.11.0'
    
    - name: Check Cosign install
      run: cosign version  

    - name: Write signing key to disk
      run: 'echo "$KEY" > cosign.key'
      shell: bash
      env:
        KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}      

    - name: Sign the images      
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        COSIGN_EXPERIMENTAL: 1      
      run: cosign sign --key cosign.key ${{ steps.meta.outputs.tags }}
